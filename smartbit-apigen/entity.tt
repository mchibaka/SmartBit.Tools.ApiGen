<#@ import namespace="System" #>
<#@ template language="C#" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Metadata" #>
<#@ template language="C#" #>
<# 
   var model = (IModel)Session["Model"];
   var entityType = (IEntityType)Session["EntityType"]; 
   var isKeyless = entityType.FindPrimaryKey() == null;
   var clrType = entityType.ClrType;
   var entityName = clrType.Name; 
   string contextName = model.FindRuntimeAnnotation("ContextName")?.Value.ToString();
   string nsController = model.FindRuntimeAnnotation("ControllerNamespace")?.Value.ToString();
#>
// <auto-generated>
//     This code was generated by a smartbit-apigen.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SmartBit.WeLearn360.CoreAPI.Database;
using SmartBit.WeLearn360.CoreAPI.Security;
using SmartBit.WeLearn360.CoreAPI.Common;
using System.Net;

namespace <#= nsController #>;

/// <summary>
/// <#= entityName#>
/// </summary>
[Route("v1")]
[ApiController]
public partial class <#= entityName #>Controller: Controller
{
        [HttpPost()]
        [Route("api/<#= entityName #>/perform-search-<#= entityName #>")]
        [RequireSecurityToken()]
        [Produces(typeof(ICollection<<#=entityName#>>))]
        public async Task<IActionResult> PerformSearchAsync(SearchCriteria criteria)
        {
            string whereClause = "";
            if(string.IsNullOrEmpty(criteria?.WhereClause)){
                 whereClause = " 1 = 1 ";
            }else{
                whereClause = criteria.WhereClause;
            }
            int maxRows = criteria?.MaximumRows ?? 1;
            if(maxRows < 100) maxRows = 100; 
            using (var db = new <#= contextName #>())
            { 
                string sqlStatement = $"SELECT TOP {maxRows} * FROM <#=entityType.GetTableName()#> WHERE {whereClause}";
                try
                {
                     ICollection<<#=entityName#>> results = await db.Database.SqlQueryRaw<<#=entityName#>>
                               (sqlStatement, criteria.Parameters).ToArrayAsync();
                    return Ok(results);
                }
                catch (Exception ex)
                {
                     return Problem( detail: ex.Message,
                                    title: "Error searching", 
                                    statusCode:(int) HttpStatusCode.InternalServerError,
                                    type: ex.GetType().Name);
                }
            }
        }  
}
